import { Button, Radio, Select } from "@mantine/core";
import { sayHello } from "Frontend/generated/HelloEndpoint";
import { useState, useEffect } from "react";

type Pair = string
type Price = number
type Direction = "BUY" | "SELL"

export function Widget() {
  const [pair, setPair] = useState<Pair | null>(null)
  const [direction, setDirection] = useState<"BUY" | "SELL">("BUY")
  const [tickedPrice, setTickedPrice] = useState<string | null>(null)
  const [trading, setTrading] = useState(false)
  const [tradedPrice, setTradedPrice] = useState<string | null>(null)

  const [number, setNumber] = useState<number | null>(null)
  const [hello, setHello] = useState<string | null>(null)


  const ticking = pair && !trading && tradedPrice === null
  const traded = tradedPrice !== null
  const readyToTrade = tickedPrice !== null && !trading && !traded

  useEffect(() => {
    setTimeout(() => fetch("/api/number").then((res) => res.json()).then(setNumber), 1000)
  })
  useEffect(() => {
    setTimeout(() => sayHello("World").then(setHello), 1000)
  })

  useEffect(() => {
    if (!ticking) return;
    const interval = setInterval(() => { setTickedPrice(randomPrice(pair, direction)) }, 1000);
    return () => clearInterval(interval);
  }, [ticking, direction]);

  useEffect(() => {
    if (!trading || !pair) return;
    const interval = setInterval(() => { setTrading(false); setTradedPrice(randomPrice(pair, direction)) }, 1000);
    return () => clearInterval(interval);
  }, [trading])

  function reset() {
    setPair(null)
    setTickedPrice(null)
    setTrading(false)
    setTradedPrice(null)
  }

  function onDirectionChange(inp: string) {
    setDirection(inp.toLowerCase() === "buy" ? "BUY" : "SELL")
    setTickedPrice(null)
  }

  function onPairChange(inp: string) {
    setPair(inp)
    setTickedPrice(null)
  }

  return <>
    <div>Number: {number}</div>
    <div>Hello: {hello}</div>
    <Select
      placeholder="Pick a pair"
      searchable
      value={pair}
      onChange={onPairChange}
      disabled={trading}
      data={pairs.map(({id}) => ({value: id, label: id}))}
    />
    <Radio.Group
      value={direction}
      onChange={onDirectionChange}
    >
      <Radio value="BUY" label="BUY" />
      <Radio value="SELL" label="SELL" />
    </Radio.Group>
    {pair &&
      <Button disabled={!readyToTrade} onClick={() => setTrading(true)}>
        {tickedPrice !== null ? tickedPrice : "Fetching..."}
      </Button>
    }
    <div>
      {trading && "Trading..."}
      {tradedPrice !== null ? "Traded at " + tradedPrice : null}
    </div>
    {traded && <Button onClick={reset}>Restart</Button>}
  </>;
}

const pairs =  [
  {id: 'EURUSD', rate: 1.307},
  {id: 'USDJPY', rate: 181},
  {id: 'GBPUSD', rate: 1.307},
  {id: 'AUDUSD', rate: 0.6861},
  {id: 'USDCAD', rate: 1.316},
  {id: 'USDCHF', rate: 0.8625},
  {id: 'NZDUSD', rate: 0.6361},
  {id: 'EURJPY', rate: 154.8},
  {id: 'GBPJPY', rate: 138.5},
]

const pairRates = Object.fromEntries(pairs.map(({id, rate}) => [id, rate]))

function randomPrice(pair: Pair, dir: Direction) {
  let val = pairRates[pair] * (1 + Math.random() * 0.001)
  val = dir === "BUY" ? val : 1 / val
  return val.toPrecision(4)
}
